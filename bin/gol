#!/usr/bin/env ruby

# hide cursor until program ends
print "\e[?25l"
at_exit { print "\e[?25h" }

# set up image processing
require 'chunky_png'
dead_colour  = ChunkyPNG::Color::WHITE
alive_colour = ChunkyPNG::Color::BLACK
side_length  = 5 # px
cells_wide   = 130
cells_high   = 148
def self.b64(str)
  [str].pack('m0')
end


# setup game of life
$LOAD_PATH.unshift File.expand_path('../lib', __dir__)
require 'gol'

game1 = Gol.parse <<RLE
x = 9, y = 8, rule = B3/S23
3o3b3o$obo3bobo$3o3b3o4$b2o3b2o$b2o3b2o!
RLE

game2 = Gol.parse <<RLE
x = 13, y = 33, rule = B3/S23
2o$2o3$3b2o$3b2o2$2o$2o10$b3o$bo$3o4$11b2o$11b2o2$8b2o$8b2o3$11b2o$11b2o!
RLE

# lotsa cray cray
# https://vimeo.com/191955072
game3 = Gol.parse <<RLE
#N Parabolic sawtooth
#O Dean Hickerson
#C A sawtooth with parabolic envelope and minimum repeating population
#C that repeats in quadratic (as opposed to exponential) time.
#C www.conwaylife.com/wiki/index.php?title=Parabolic_sawtooth
x = 126, y = 144, rule = B3/S23
34b2o11b2o36b2o18b2o19b$34bo12bo37bo19bo20b6$16b2o16bo91b$16bo16b3o90b
$33b3o36b2o29bo5bo16b$72bo11b3o16b2o3b2o16b$31b2o3b2o6b2o3b2o32bo3bo
38b$31bo5bo44bo5bo16b3o18b$45bo3bo32bo5bo16b3o18b$46b3o57bo19b$46b3o
24bo10bo41b$35bo35b2ob2o7b2o41b$34bo91b$34b3o33bo5bo49b$14b5o107b$13bo
b3obo50b2o3b2o5b3o41b$14bo3bo26bo5bo30b3o41b$15b3o15bo5bo4b3o5bo28bo3b
o40b$16bo16bo5bo4b3o3b3o73b$34bo3bo41b2o3b2o20b3o6b2o8b$35b3o4b2o3b2o
57bo3bo5bo9b$42bo5bo56bo5bo14b$5b2o7bo90bo5bo14b$5bo8bo111b$13bobo110b
$12b2ob2o99b3o7b$11bo5bo98b3o7b$14bo23b2o7b2o23b2o3b2o36bo3bo6b$11b2o
3b2o20bo8bo24bo5bo47b$5bo33b3o6b3o31b2o23b2o5b2o3b2o5b$4b3o27b2o5bo8bo
4b2o16bo3bo4bo24bo18b$4b3o28bo19bo18b3o21b2o26b$35bobo5bo9bobo42bo27b$
2b2o3b2o27b2o4bobo8b2o71b$2bo5bo32bob2o81b$40b2ob2o81b$13b2o26bob2o13b
o67b$13bo9b2o17bobo12bo40bo27b$4bo15bo4b4o14bo13b3o14b2o4bobo13b2ob2o
25b$5bo13b2o2b2ob3o36b2o7bo5b2o44b$3b3o17bo37b4o4b2o10bo13bo5bo24b$61b
3ob2o2bo18bo2bo34b$66bo16b2o2b2o3bo2b2o3b2o14bo5bo3b$83bo8bo23b2o3b2o
3b$o5bo81b4o34b$o5bo111b3o5b$bo3bo21bo15bo74b3o5b$2b3o22b2o15bo74bo6b$
26bobo13b3o81b3$34bo91b$34b3o89b$37bo88b$36b2o55b2o3b2o2b2o22b$25b2o
66bo5bo2bo23b$26bo32bo9b2o51bo3b$57bobo10bo23bo3bo22b3o2b$23bo2bo31b2o
10bobo5bo16b3o22b5ob$3b2o3b2o14bo2bo43b2o3b4o39b2o3b2o$3b2o3b2o15bobo
8bo5bo34bob2o9b2o34b$4b5o17bo9bo5bo32bobob3o8bo35b$5bobo29bo3bo35bob2o
45b$25b2o11b3o35b4o32b2o12b$5b3o17bo30bo21bo33bobo11b$57b2o37b2o11b2ob
obo11b$56b2o38bo12bobobo12b$111bo14b$111b2o13b$8bo43b2o57b3o12b$7bobo
42bo23bo34b3o3b2o3b2o2b$6bo3bo63bobo34b3o3b2o3b2o2b$7b3o28b2o35b2o34b
2o5b5o3b$5b2o3b2o26bo15b2o55bo7bobo4b$54bo32b2o20bobobo12b$45b2o5bobo
32bo21b2obobo4b3o4b$44b3o5b2o19bo38bobo11b$32bo8bob2o29bo37b2o12b$32bo
bo6bo2bo27b3o51b$20b2o11bobo5bob2o81b$20bo12bo2bo7b3o79b$33bobo9b2o63b
2o7b2o5b$32bobo75bo8bo6b$32bo93b$8b2o33b2o81b$8bo34bo12b2o51b3o14b$55b
o2bo50b2o15b$47b2o6bo56b2o12b$48b2o5bo55b3o12b$47bo7bob2o51bobo13b$57b
o52b2o14b3$56b2o68b$56bo69b2$28bobo95b$28bo3bo93b$18b2o12bo10b2o81b$
18bo14bo7bo2bo21b2o42b2o14b$32bo7bo11b2o12bo43bo15b$28bo3bo7bo11bo73b$
28bobo9bo85b$41bo2bo20b3o58b$43b2o20b2o59b$68b2o56b$34bo32b3o56b$34bob
o29bobo57b$17b2o18b2o4b2o21b2o41b2o15b$19bo17b2o4bo65bo16b$20bo16b2o9b
3o23bo51b$9b2o9bo8bo4bobo13bo22b2o51b$9bo10bo9bo3bo14bo7b2o13b2o8b2o
42b$19bo8b3o26b3o11b3o8bo43b$17b2o40b2obo9b2o52b$59bo2bo10b2o51b$59b2o
bo11bo51b$50b2o5b3o66b$49bobo5b2o67b$49bo44bo31b$48b2o40b2o2b2ob3o26b$
90bo5b4o26b$86b2o6b2o30b$85bobo18b2o18b$22b2o60b3o19bo19b$24bo59b2o21b
3o16b$14b2o9bo13bo47b2o20bo16b$14bo10bo13bobo44b3o37b$25bo16b2o4b2o12b
2o62b$24bo17b2o4bo13b3o61b$22b2o18b2o9b2o9b2obo11bo6b2o38b$39bobo11bo
10bo2bo10b2o6bo39b$39bo24b2obo9b2o47b$62b3o11b3o47b$62b2o13b2o47b$78b
2o5b2o39b$79bo5bobo38b$87bo38b$87b2o!
RLE

game4 = Gol.parse <<RLE
#N Fast forward force field
#O Dieter Leithner
#C A reaction involving a lightweight spaceship and three gliders. In
#C the absence of the incoming lightweight spaceship from the left, the gliders would simply annihilate one another, but as shown they allow the spaceship to advance 11 spaces in the course of the next 6
#C generations. Leithner named the Fast Forward Force Field in honour
#C of his favourite science fiction writer, the physicist Robert L. Forward.
x = 17, y = 7, rule = B3/S23
7bo6bo2b$8bo6b2o$2b2o2b3o5b2ob$2ob2o12b$4o9bo3b$b2o9b2o3b$12bobo!
RLE

# A bunch of gliders emit a crab
# http://conwaylife.com/forums/viewtopic.php?f=2&t=1533#p15253
game5 = Gol.parse <<RLE
x = 98, y = 100, rule = B3/S23
86bo$84b2o$85b2o$71bobo$71b2o22bo$72bo20b2o$64bobo27b2o$64b2o$65bo6$
73bobo$73b2o$74bo2$85bobo$85b2o$86bo2$73bobo$73b2o$74bo4$74bo$72b2o$
73b2o13$62bo$61bo$61b3o19$22b2o$23b2o$22bo$9b3o$11bo55b2o$10bo56bobo$
67bo$32bo27bo$32b2o25b2o$8b2o21bobo25bobo16b2o3b2o$7bobo7b3o57b2o4bobo
$9bo9bo59bo3bo$18bo$81bo$80b2o$80bobo$5b2o$4bobo$6bo86bo$92b2o$3o89bob
o$2bo$bo94b2o$95b2o$69b2o26bo$68b2o$70bo2$93b3o$93bo$5b2o87bo$6b2o$5bo
$80b2o$80bobo$80bo!
RLE

# Makes me think of monkeys clapping cymbals and riding unicycles and shitting on each other
# http://conwaylife.com/forums/viewtopic.php?f=2&t=1533#p15336
game6 = Gol.parse <<RLE
x = 103, y = 76, rule = B3/S23
65bo2bob2obo2bo$65b4ob2ob4o$65bo2bob2obo2bo8$69b2o6b2o$69b2o6b2o2$60b
2o$60b2o2$75b2o$75bobo$21b2o3b2o49bo$21b2o2bob3o47b2o$25bo4bo$21b4ob2o
2bo$21bo2bobobob2o$24bobobobo$25b2obobo$29bo2$15b2o$3b3o10bo7b2o$2bo3b
o3b3o3bobo5b2o$bo5bo2b3o4b2o63bo$80bobo$o7bobobo68b2o$o7bobobo2$bo5bo
2b3o79b2o5b2o$2bo3bo3b3o79b2o5bo$3b3o21b2o17b2o49bobo$27bo19b2o48b2o$
28b3o15bo46b2o$16bo8bo4bo62bobo$10b2o4b2o5b3o24bo43bo$9bo2bo2bobo4bo
27b3o48bo$11b2o9b2o29bo47bo$7bo44b2o46b3o$6bob2o52b2o29b2o$6bo5b2o48bo
29bobo$5b2o5b2o46bobo29bo3bo3b3o$54b2o4b2o31b4o4bo$53bo2bo44bo$54b2o
45bo$42b2o49b4o4bo$42b2o48bo3bo3b3o$64bo27bobo$64b3o26b2o$18b3o37b2o7b
o32b3o$10b2o4b2obo38bobo5b2o33bo$10b2o4b3o39bo42bo3$15bobo33b2o3b2o$
14bob2o13b2o19bo3bo$15bo15bobo15b3o5b3o$16bo16bo15bo9bo16b2o$16b2o15b
2o34b2o5bobo$18b2o49b2o7bo$18bob2o56b2o$14bo3bo2bo$15b2obobo44bo$17b3o
44bobob2o$64bobobobo$63b2obobobo2bo$64bo2b2ob4o$22bo41bo4bo$23bo41b3ob
o2b2o$21b3o43b2o3b2o!
RLE

game = game6 # change which one this is if you want to play different games

x_offset = (cells_wide-game.x)/2
y_offset = (cells_high-game.y)/2
world = Set.new game.world.map { |x, y| [x+x_offset, y+y_offset] }

# save info
should_save    = false
should_print   = true
num_iterations = 500
ss_dir   = File.expand_path('../screenshots', __dir__)
save_dir = File.join ss_dir, Time.now.strftime('%F-%T')
Dir.mkdir ss_dir   unless Dir.exist? ss_dir
Dir.mkdir save_dir unless Dir.exist? save_dir


1.upto Float::INFINITY do |i|
  # construct the image
  image = ChunkyPNG::Image.new(
    side_length*cells_wide,
    side_length*cells_high,
    dead_colour
  )
  world.each do |x, y|
    next if x < 0 || y < 0 || cells_wide <= x || cells_high <= y
    # TODO when I'm more energized (this will make the board prettier, I think)
    # if above/below/left/right are all the same as current
    #   square in current
    # else
    #   if cell above and to the right are the same state,
    #     draw a triangle topright of their colour
    #   same for the other four corners
    #   then draw a circleinthe middle for the cell's current colour
    image.rect(
      x*side_length,
      y*side_length,
      x*side_length+side_length,
      y*side_length+side_length,
      alive_colour,
      alive_colour
    )
  end

  # save the image
  if should_save
    filename = File.join(save_dir, "%06d.png"%i)
    image.save filename
    puts "#{filename}\t#{i}/#{num_iterations}"
  end

  # print the image
  if should_print
    png = image.to_blob(fast_rgba: true) # we can use the fast version if we don't have transparency
    $stdout.print "\e[H\e[2J" # go to top-left and clear screen
    $stdout.print(
      "\e]1337;",
      "File=#{b64 'game-of-life'};",
      "size=#{png.bytesize};",
      "inline=1:#{b64 png}",
      "\a\n",
    )
  end

  break if i == num_iterations
  world = Gol.tick world
end
